#!/bin/zsh
x=/*
if ! command -v bc &>/dev/null; then
    echo The game requires BSD bc to run
    exit 1
fi

version=$(bc -V | awk '{print $2"\n6.5";exit}' | sort -Vr | head -1)
if [[ "$version" == "6.5" ]]; then
    echo Version 6.5.0 or higher of bc is required.
    exit 1
fi

ORIG=`stty -g`
trap 'stty "$ORIG";printf "\033[?25h"' INT TERM EXIT
stty -echo
echo -ne "\033[?25l"

while {}; do
    v=
    read -rs -k1 -t0.3 v

    case "${v:u}" in
        [WASDLJKM]) echo ${v:u};; " ") echo 1;; *) echo 0;;
    esac
done | bc -g -Ll -f "$0"
exit; */1

define band(x, y) {
    auto result, power, m[]
    result = 0
    power = 1
    scale = 0

    x = abs(x)$; y = abs(y)$

    while (x && y) {
        x = divmod(x, 2, m[])
        if (m[0]) {
            y = divmod(y, 2, m[])
            if (m[0]) result += power
        } else {
            y /= 2
        }

        power *= 2
    }
    return result
}

define check_bit(x, y) {
    auto result, m[]
    result = 0
    scale = 0

    while (x && y) {
        x = divmod(x, 2, m[])
        if (m[0]) {
            y = divmod(y, 2, m[])
            result += m[0]
        } else {
            y /= 2
        }
    }
    return result
}

define cnt_digits(x) {
    auto i
    scale = 0

    for (i = 0; x /= 10; i++){}
    return i
}

define min(a, b) {
    if (a < b) return a
    return b
}

define max(a, b) {
    if (a > b) return a
    return b
}

define cached_sqrt(x) {
    if (sqrt_cache_[x]) return sqrt_cache_[x]
    return sqrt_cache_[x] = sqrt(x)
}

define acos(a) {
    auto r

    if (a <= -1 || a >= 1) return 0 /* NaN if JS */
    return 2 * a(sqrt((1 - a) / (1 + a)))
}

define cached_acos(a) {
    auto arg
    arg = (a << 3)$

    if (arg > 0) {
        if (pos_acos_cache_[arg]) return pos_acos_cache_[arg]
        return pos_acos_cache_[arg] = acos(a)
    } else {
        arg = -arg
        if (neg_acos_cache_[arg]) return neg_acos_cache_[arg]
        return neg_acos_cache_[arg] = acos(a)
    }
}

define mod(a, b) {
    scale = 0; return a$ % b$
}

/* faster than the library function by more than 4 times */
define s(x) {
    auto sign, xf, per, xx, y

    x *= 0.63661977236758134308
    if (sign = (x < 0)) x = -x

    xf = x$
    x -= xf

    if (mod(xf, 2)) x = 1 - x

    per = mod(xf / 2, 2)
    xx = x * x
    y = x * (1.5707903005870776 + xx * (-0.6458858977085938 + xx*(0.07941798513358536 - 0.0043223880120647346 * xx)))

    if (sign != per) return -y
    return y
}

define void swap_array(*arr[], pos1, pos2) {
    auto t
    t = arr[pos1]
    arr[pos1] = arr[pos2]
    arr[pos2] = t
}

/* base64 encode array and print */
define void base64_encode_and_print(bytes[]) {
    auto i, len, b, bit, b6, index

    len = length(bytes[])

    for (i = 0; i < len; i+=3) {
        b6 = 0
        for (b = 0; b < 24; b++) {
            index = i + b / 8

            bit = check_bit(bytes[index] * (bits_[b % 8]), 128)
            b6 = b6 * 2 + bit

            if (mod(b, 6) == 5) {
                if (b6 < 26) print asciify(b6 + 65); else
                if (b6 < 52) print asciify(b6 - 26 + 97); else
                if (b6 < 62) print asciify(b6 - 52 + 48); else
                if (b6 < 63) print "+"; else print "/"

                if (index >= len) {
                    for (;mod(len, 3); len++) print "="
                    break
                }

                b6 = 0
            }
        }
    }
}

/* print array */
define void print_array(b[]) {
    auto i

    for (i = 0; i<length(b[]); i++) {
        print b[i], " "
    }
    print "\n"
}

/***** My own graphics library for bc *****/

black_ = 0
white_ = 1

/* create new image */
define void img__new(*img[], w, h, bg) {
    auto x, y
    img[0] = w; img[1] = h

    for (y = 0; y < h; y++) for (x = 0; x < w; x++) img[2 + x + y * w] = bg
}

/* helper for packing binary data */
define v_pack(*bytes[], bsize, offset, d) {
    auto i, m[]

    scale = 0
    for (i = 0; i < bsize / 8; i++) {
        d = divmod(d, 256, m[])
        bytes[i + offset] = m[0]
    }

    return i + offset
}

/* create mono BMP, encode by base64 and print */
define void img__monobmp(img[], colors[]) {
    auto b, s, bmp[], i, x, y, wh, p, byte

    scale = 0

    wh = ceil(img[0] / 8, 0)

    if (header_[0]) {
        s = length(header_[])
    } else {
        header_[s++] = 66; header_[s++] = 77  /* BM */
        s = v_pack(header_[], 32, s, 0)       /* space for Length */

        /* Main header */
        s = v_pack(header_[], 16, s, 0)       /* Reserved */
        s = v_pack(header_[], 16, s, 0)       /* Reserved */
        s = v_pack(header_[], 32, s, 32)      /* Offset of image data */

        /* Subheader */
        s = v_pack(header_[], 32, s, 12)      /* Subheader length */
        s = v_pack(header_[], 16, s, img[0])  /* Width */
        s = v_pack(header_[], 16, s, img[1])  /* Height */
        s = v_pack(header_[], 16, s, 1)       /* Planes */
        s = v_pack(header_[], 16, s, 1)       /* Bit count */
    }

    for (i = 0; i < s; i++) bmp[i] = header_[i]

    /* Color table */
    for (i = 0; i < 6; i++) bmp[s++] = colors[i]

    for (y = img[1] - 1; y >=0; y--) {
        p = 0

        for (x = 0; x < img[0]; x += 8) {
            byte = 0
            for (b = 0; b < 8; b++) {
                byte = byte * 2 + img[2 + x + b + y * img[0]]

                if (x + b >= img[0]) {
                    byte *= bits_[wh - img[0]]
                }
            }
            bmp[s++] = byte
            p += 1
        }

        /* Row padding */
        for (; p % 4; p++) bmp[s++] = 0
    }

    s = v_pack(bmp[], 32, 2, length(bmp[])) /* Full length */

    base64_encode_and_print(bmp[])
}

/* Output image to iTerm2 terminal */
define void img__out_iterm2(img[], ratio, colors[]) {
    print "]1337;File=inline=1;width=", img[0] * ratio, "px;height=", img[1] * ratio, "px:"
    img__monobmp(img[], colors[])
    "" 
}

/* Set pixel */
define void img__setpixel(*img[], x, y, color) {
    if (x < img[0] && y < img[1] && x >= 0 && y >= 0) img[2 + x + y * img[0]] = color
}

/* Draw bitmap */
define void img__number_bitmap(*img[], x, y, number, w, h, invert) {
    auto ix, iy, pixel[]
    scale = 0
    for (iy = 0; iy < h; iy++) for (ix = 0; ix < w; ix++) {
        number = divmod(number, 2, pixel[])
        img__setpixel(img[], x + ix, y + iy, bxor(pixel[0], invert))
    }
}

/**** Game code *****/

w_ = 128
h_ = 64
zoom_ = 4
map_size_ = 16 /* 16Ã—16 */

/*
map_ â€” map (16Ã—16)
z_ - z-buffer(128)
header_ - BMP header cache
*/

player_points_ = num_killed_ = num_monsters_ = player_rotation_ = player_x_ = player_y_ = game_level_ =\
player_dead_ = fwd_ = u_ = 0
player_health_ = 64
moved_ = 1

rad_ = pi(15) / 180   /* used to convert angles to radians */
f_ = 30 * rad_        /* angle of view (larger distorts the "lens") */
dist_to_proj_plane_ = (64 / tan(f_)) $ /* 110 pixels */
r_ = 2 * f_ / w_     /* this is the angle of each ray to cover 128 pixels */

player_eye_level_ = 32
inf_ = 1e300

c_180_ = pi(15)
c_90_ = c_180_ / 2
c_270_ = c_180 * 3 / 2

sbar_h_ = 8

frame_delay_ = 0

for (i = 0; i < 16; i++) bits_[i] = bshl(1, i)

/* Sprites 16Ã—16 */
sp_[48]=sp_[49]=sp_[50]=sp_[51]=sp_[52]=sp_[53]=sp_[64]=sp_[65]=sp_[66]=sp_[67]=sp_[68]=sp_[69]=sp_[96]=\
sp_[97]=sp_[98]=sp_[99]=sp_[7U]=sp_[7V]=sp_[7W]=sp_[7X]=sp_[7Y]=sp_[7Z]=sp_[8W]=sp_[8X]=sp_[8Y]=sp_[8Z]=\
sp_[9Q]=sp_[9R]=sp_[9S]=sp_[9T]=sp_[9U]=sp_[9V]=sp_[AS]=sp_[AT]=sp_[AU]=sp_[AV]=sp_[AW]=sp_[AX]=sp_[AY]=\
sp_[AZ]=sp_[BY]=sp_[BZ]=sp_[CQ]=sp_[CR]=sp_[CS]=sp_[CT]=sp_[CU]=sp_[CV]=sp_[DU]=sp_[DV]=sp_[DW]=sp_[DX]=\
sp_[DY]=sp_[DZ]=sp_[EV]=sp_[EW]=sp_[EX]=sp_[EY]=sp_[EZ]=0;sp_[5]=4;sp_[4]=sp_[6]=E;sp_[1]=sp_[C]=sp_[E]=\
AS;sp_[EQ]=NQ;sp_[0]=sp_[2]=sp_[D]=448;sp_[45]=720;sp_[W]=sp_[39]=sp_[80]=sp_[87]=sp_[93]=sp_[BQ]=sp_[BX]=\
sp_[CW]=sp_[DT]=7SS;sp_[X]=sp_[38]=sp_[BR]=sp_[BW]=7UW;sp_[40]=sp_[8R]=8QS;sp_[46]=9TY;sp_[8Q]=sp_[9W]=\
sp_[9X]=GZY;sp_[47]=sp_[81]=sp_[86]=sp_[94]=sp_[95]=sp_[CX]=sp_[DS]=HVU;sp_[Z]=sp_[BU]=HWW;sp_[EU]=HZU
sp_[37]=sp_[BS]=JVY;sp_[ER]=KVQ;sp_[Y]=sp_[36]=sp_[BT]=sp_[BV]=KVU;sp_[8S]=sp_[8T]=NQW;sp_[9Y]=sp_[9Z]=4064
sp_[82]=sp_[83]=sp_[84]=sp_[85]=sp_[CY]=sp_[CZ]=sp_[DQ]=sp_[DR]=4092;sp_[9]=4096;sp_[55]=sp_[62]=4104
sp_[56]=sp_[57]=4488;sp_[43]=4740;sp_[8U]=sp_[8V]=5136;sp_[ET]=6096;sp_[58]=sp_[59]=6120;sp_[44]=7928
sp_[AQ]=sp_[AR]=8176;sp_[54]=sp_[63]=sp_[70]=sp_[71]=sp_[72]=sp_[73]=sp_[74]=sp_[75]=sp_[76]=sp_[77]=sp_[78]=\
sp_[79]=sp_[92]=8184;sp_[91]=8188;sp_[ES]=9544;sp_[60]=sp_[61]=9XZU;sp_[8]=sp_[A]=BUVQ;sp_[88]=FVTY
sp_[42]=TYVU;sp_[90]=TYXY;sp_[R]=TZXZ;sp_[Q]=UQSX;sp_[K]=UTZV;sp_[N]=VVTR;sp_[M]=WUVZ;sp_[O]=WVXR
sp_[P]=YWRZ;sp_[L]=YXTR;sp_[I]=sp_[T]=40965;sp_[S]=49155;sp_[J]=49667;sp_[H]=sp_[U]=53259;sp_[41]=65508
sp_[89]=65532;sp_[3]=sp_[7]=sp_[B]=sp_[F]=sp_[G]=sp_[V]=65535

/* Sprites offset */
sp_wall = 0
sp_5k = 16
sp_enemy = 32
sp_health = 48
sp_healthmask = 64
sp_enemymask = 80
sp_gun = 96
sp_gunmask = 112
sp_dead = 128
sp_deadmask = 144
sp_fire = 160

font[0] = 31599 /* 3Ã—5 */
font[1] = 18740 /* 3Ã—5 */
font[2] = 29671 /* 3Ã—5 */
font[3] = 31207 /* 3Ã—5 */
font[4] = 18925 /* 3Ã—5 */
font[5] = 31183 /* 3Ã—5 */
font[6] = 31695 /* 3Ã—5 */
font[7] = 18727 /* 3Ã—5 */
font[8] = 31727 /* 3Ã—5 */
font[9] = 18927 /* 3Ã—5 */

for (i = 0; i < w_; i++) z_[i] = 0

/* Draw number */
define void draw_number(number, x, y, invert) {
    auto len, i, digit, m

    len = cnt_digits(number) + 1

    for (i = 0; i<len; i++) {
        m = 10 ^ (len - i - 1)
        digit = (number / m) $
        number -= digit * m

        img__number_bitmap(canvas[], x, y, font[digit], 3, 5, invert)
        x += 4
    }
}

define is_not_valid_location(x,y) {
    x /= 64
    y /= 64

    if (x < 0 || y < 0 || x > map_size_ - 1 || y > map_size_ - 1) {
        return 1
    }

    return map_[x $ + map_size_ * y $]
}


/* Init world map */
define void init_map() {
    auto i, wall_cnt, x, y
    for (i = 0; i < map_size_ * map_size_; i++) map_[i] = 0

    wall_cnt = 30 + 4 * game_level_

    while (wall_cnt) {
        x = irand(map_size_)
        y = irand(map_size_)

        if (x * y > 4) {
            map_[x + map_size_ * y] = 1
            wall_cnt -= 1
        }
    }
}

define void init_objects() {
    auto i, x, y, type, o_cnt, k

    o_cnt = 0

    /* clear objects */
    for (i = 0; i < length(o_[]); i++) o_[i] = 0

    i = 6 + 4 * game_level_

    while (i) {
        x = 64 * (irand(12) + 2)
        y = 64 * (irand(12) + 2)
        if (x == player_x_ && y == player_y_) continue

        type = (mod(i, 8) && 1) /* 0 â€” health, 1 â€” monster */

        if (!is_not_valid_location(x, y)) {
            o_x_[o_cnt] = x
            o_y_[o_cnt] = y
            o_type_[o_cnt] = type
            k = srand(1)

            if (type) {
                o_dx_[o_cnt] = k * (irand(64) / 4 * game_level_) $
                o_dy_[o_cnt] = k * (irand(64) / 4 * game_level_) $
                num_monsters_ += 1
            } else {
                o_dx_[o_cnt] = o_dy_[o_cnt] = 0
            }

            o_dead_[o_cnt] = o_vis_[o_cnt] = 0

            o_[o_cnt++] = 1 /* object exists */
            i -= 1
        }
    }
}

define draw_sprite(sprite, sprite_mask, sy, sx, dy, dx, check, invert) {
    auto height, width, canvas_changed, x, y, px, py, clr, msk

    height = abs(dy - sy)
    width  = abs(dx - sx)
    canvas_changed = 0

    if (sy < 0) sy = 0
    if (dy >= h_) dy = h_ - 1

    for (x = sx; x < dx; x++) {
        /* if $f is zero then we draw as long as it is on the screen
           otherwise check zBuffer which holds scanline information
           for visibility, if something already occupies the at
           a closer depth then we know that whatever we were
           attempting to draw
           is hidden so we do not draw it */

        if (x >= 0 && x < w_) {
            if (!check || check <= z_[x]) {
                px = band(16 * (x - sx) / width, 15)

                for (y = sy; y < dy; y++) {
                    py = (16 * (y - sy) / height) $

                    clr = check_bit(sp_[sprite + py], bits_[px])
                    msk = check_bit(sp_[sprite_mask + py], bits_[px])

                    if (msk) {
                        img__setpixel(canvas[], x, y, bxor(clr, invert))
                        canvas_changed = 1
                    }
                }
            }
        }
    }

    return canvas_changed
}

define void clear_terminal() {
    print "[2J"
}


define void show_screen(cz) {
    auto colors[]

    if (cz == 1) { /* invert */
        colors[0] = colors[1] = colors[2] = 255
        colors[3] = colors[4] = colors[5] = 0
    } else {
        colors[0] = colors[1] = colors[2] = 0
        colors[5] = 255
        colors[3] = colors[4] = 255 * (cz != 2) /* white or red */
    }

    print "[H"
    img__out_iterm2(canvas[], zoom_, colors[])
    print "[H"
}

define void start() {
    game_level_ += 1
    player_x_ = player_y_ = 128
    num_killed_ = num_monsters_ = player_rotation_ = 0

    img__new(canvas[], w_, h_ + sbar_h_, white_)
    draw_number(game_level_, w_ / 2 - 2, h_ / 2, 1)
    show_screen(0)

    init_map()
    init_objects()

    frame_delay_ = 4
}

define void ray_cast() {
    auto angle_offset, ray_angle, wall_side, prev_wall_side, prev_height, prev_dist, tex_coord, tex_u, tex_v,\
    horiz_dist, vert_dist, wall_dist, step_x, step_y, ray_start_y, vert_hit_x, vert_hit_y, horiz_hit_x, \
    horiz_hit_y, wall_x, wall_y, wall_height, ray_start_x, col, dist_delta, draw_top, draw_bottom, tex_col, \
    tex_row, tex_bit, sprite_id, skip_pixel, canvas_size, cos_angle, x, y, wall_draw_start_y

    img__new(canvas[], w_, h_ + sbar_h_, black_)

    /* white status bar */
    canvas_size = length(canvas[])
    for (i = w_ * h_ + 2; i < canvas_size; i++) canvas[i] = white_

    angle_offset = -f_ /* f_ is the view ray_angle, the larger f_ is the more we cram into the view area */
    ray_angle = player_rotation_ + angle_offset
    wall_side = -1
    tex_u = tex_v = 0
    horiz_dist = inf_

    wall_dist = 0

    /* what scanline we are working on (0-128) */
    for (col = 0; col < w_; col++) {
        prev_dist = wall_dist
        prev_height = wall_height

        cos_angle   = cos(ray_angle)
        horiz_hit_x = sin(ray_angle)
        horiz_hit_y = horiz_hit_x / cos_angle

        /* if ray_angle is 0 or 180 then we get a divide by zero error so we ignore the ray */
        if (!ray_angle || ray_angle == c_180_) {
            vert_dist = inf_
        } else {
            if (horiz_hit_x > 0) {
                ray_start_y = 64 * ((player_y_ / 64 + 1) $)   /* start at the tile in front of the player */
                step_y = 64                                   /* increment in whole tiles forward */
                ray_start_x = player_x_ + (ray_start_y - player_y_) / horiz_hit_y /* start with an adjustment to the side of the player */
                step_x = 64 / horiz_hit_y                     /* increment 64/horiz_hit_y to the side (plot chart) */
            } else {
                /* otherwise we are facing backwards so we go in the opposite direction */
                ray_start_y = ((player_y_ / 64) $) * 64 - .0001
                step_y = -64
                ray_start_x = player_x_ + (ray_start_y - player_y_) / horiz_hit_y
                step_x = -64 / horiz_hit_y
            }

            /* while we have not hit a wall tile or edge of the map */
            while(!is_not_valid_location(ray_start_x, ray_start_y)) {
                ray_start_x += step_x /* keep shooting the ray */
                ray_start_y += step_y
            }

            vert_hit_x  = ray_start_x  /* store the final location where the ray hits a wall tile */
            vert_hit_y  = ray_start_y
            vert_dist = abs((player_x_ - ray_start_x) / cos_angle)

            tex_u = mod(ray_start_x, 64)   /* the pattern repeats every 64 pixels. */

            if (horiz_hit_x > 0) {
                tex_u = 64 - tex_u    /* flip the pattern */
            }
        }

        /* if we are at 90 or 270 degrees our ray has infinite problems */
        if (ray_angle == c_90_ || ray_angle == c_270_) {
            horiz_dist = inf_
        } else {
            if (cos_angle > 0) {
                ray_start_x = ((player_x_ / 64 + 1) $) * 64 /* start one tile in front of player */
                step_x  = 64
                ray_start_y = player_y_ + (ray_start_x - player_x_) * horiz_hit_y
                step_y  = 64 * horiz_hit_y
            } else {
                ray_start_x = ((player_x_ / 64) $) * 64 - .0001 /* start just behind player */
                step_x  = -64
                ray_start_y = player_y_ + (ray_start_x - player_x_) * horiz_hit_y   /* at 90 and 270, horiz_hit_y goes to infinity so multiplying */
                                                          /* results in an invalid number */
                step_y  = -64 * horiz_hit_y
            }

            /* again look for the first wall tile we hit */
            while (!is_not_valid_location(ray_start_x, ray_start_y)) {
                ray_start_x += step_x
                ray_start_y += step_y
            }

            horiz_hit_x = ray_start_x
            horiz_hit_y = ray_start_y
            horiz_dist = abs((player_x_ - ray_start_x) / cos_angle)

            tex_v = mod(ray_start_y, 64)
            if (cos_angle < 0) {
                tex_v = 64 - tex_v
            }
        }

        prev_wall_side = wall_side
        /* we are looking for the smallest distance to travel
           both rays cannot be infinite at once so we pick the one
           that is not infinite */
        if (vert_dist < horiz_dist) {
            tex_coord  = tex_u      /* texture scanline */
            wall_dist  = vert_dist  /* distance from camera */
            wall_side = 0
            wall_x  = vert_hit_x    /* map x position */
            wall_y  = vert_hit_y    /* map y position */
        } else {
            tex_coord  = tex_v      /* text scanline */
            wall_dist  = horiz_dist /* distance from camera */
            wall_side = 1
            wall_x  = horiz_hit_x   /* map x position */
            wall_y  = horiz_hit_y   /* map y position */
        }

        wall_dist *= cos(angle_offset)

        z_[col] = wall_dist /* z-buffer, wall_dist is the depth of the scanline */

        wall_height = (64 / wall_dist * dist_to_proj_plane_) $ /* height of the scanline */
        dist_delta = abs(prev_dist - wall_dist) /* change in distance from previous wall_dist */
        draw_top = (player_eye_level_ - wall_height / 2) $ /* the top of our scanline */
        draw_bottom = (player_eye_level_ + wall_height / 2) $ /* the bottom of the scanline */

        wall_draw_start_y = draw_top  /* starting position for scanning */

        /* tex_col is the x pixel position in the texture
           tex_coord will go from 0 to 63 so dividing by 4 gets us 0 to 15*/

        tex_col = (tex_coord / 4)$

        if (dist_delta > 64 && prev_height > wall_height) {  /* prev_height is the previous scanline height */
            wall_height = prev_height
        }

        if (draw_top < 0) { /* make sure we are not trying to draw above the view area */
            draw_top = 0
        }

        if (draw_bottom >= h_) { /* if draw_bottom is greater than the height of the view area then adjust */
            draw_bottom = h_ - 1
        }

        x = (wall_x / 64) $ /* our tile position */
        y = (wall_y / 64) $

        /* if we're out of bounds of the map
           and the level is less than 5 then
           alternate wall tiles
           otherwise use the enemy sprite as a wall
           tile and alternate it.
           if we're in bounds then use the default
           wall tile 0 */

        if ((x<0 || x>15) && mod(y, 2)) {
            sprite_id = sp_5k
        } else {
            if (game_level_ > 4) sprite_id = sp_enemy; else sprite_id = sp_wall
        }

        /* start at the top of the scanline and work down */
        for (y = draw_top; y < draw_bottom; y++) {
            /* the row of pixels is based on the current y
             y position */

            if (y - wall_draw_start_y < 0) {
                tex_row = (ceil((y - wall_draw_start_y) / wall_height * 64, 0) / 4)$
            } else {
                tex_row = (((y - wall_draw_start_y) / wall_height * 64) / 4)$
            }

            tex_bit = check_bit(sp_[sprite_id + tex_row], bits_[tex_col])

            skip_pixel = (tex_bit || /* is the color 1 or 0? */ \
                (col && prev_wall_side != wall_side) || /* is col 0 and prev_wall_side not equal to wall_side (prev_wall_side is the prior version of wall_side) */ \
                (dist_delta >= 64 && col) || /* if our change in distance is greater than 64 and col is non 0 */ \
                (wall_dist >= 64*3 && wall_dist < 64*4 && mod(col, 4) == mod(y, 4)) || /* skip pixels based on distance from player */ \
                (wall_dist >= 64*4 && wall_dist < 64*6 && mod(col, 3) == mod(y, 3)) || /* this is how the "lighting" is done */ \
                (wall_dist >= 64*6 && mod(col, 2) == mod(y, 2)))

            if (!skip_pixel) {
                /* if after all of the checks we having something to plot */
                img__setpixel(canvas[], col, y, white_)
            }
        }

        ray_angle  += r_  /* increment the ray ray_angle */
        angle_offset += r_
    }
}

define void swap_o(pos1, pos2) {
    swap_array(o_angl_[], pos1, pos2)
    swap_array(o_vis_[],  pos1, pos2)
    swap_array(o_dist_[], pos1, pos2)
    swap_array(o_dx_[],   pos1, pos2)
    swap_array(o_dy_[],   pos1, pos2)
    swap_array(o_type_[], pos1, pos2)
    swap_array(o_lx_[],   pos1, pos2)
    swap_array(o_rx_[],   pos1, pos2)
    swap_array(o_x_[],    pos1, pos2)
    swap_array(o_y_[],    pos1, pos2)
    swap_array(o_dead_[], pos1, pos2)
}

define void sort_o(len) {
    auto j, i, delta

    for(j = 1; j < len; j++) {
        for(i = j; i > 0; i--) {
            delta = abs(o_dist_[i] - o_dist_[i-1])
            if(delta < 5 && abs(o_angl_[i] - c_90_) < abs(o_angl_[i-1] - c_90_)) {
                swap_o(i, i-1)
            } else if(o_dist_[i] > o_dist_[i-1]) {
                swap_o(i, i-1)
            } else {
                break
            }
        }
    }
}

define void tick() {
    auto i, flash_type, dir_x, dir_y, x, y, sprite_height, sprite_top, sprite_bottom, sprite_pattern,\
    sprite_mask, x_fwd, y_fwd, dir_len, len

    if (frame_delay_ > 0) {
        frame_delay_ -= 1
        return
    }

    if (num_monsters_ - num_killed_ < 1) {
        start()
        return
    }

    len = length(o_[])

    for (i = 0; i < len; i++) {
        if (!o_dead_[i]) {
            if (o_vis_[i] < 3) {
                /* if the object is not out of view of the player for 3 frames */
                /* then move the monster otherwise it can stay hiding */

                if (is_not_valid_location(o_x_[i] + o_dx_[i], o_y_[i] + o_dy_[i])) {
                    /* if the enemy hit a wall then reverse its direction of travel */
                    o_dx_[i] = -o_dx_[i]
                    o_dy_[i] = -o_dy_[i]
                }
                /* move the enemy */
                o_x_[i] += o_dx_[i]
                o_y_[i] += o_dy_[i]

                moved_ = 1
            }

            if (!o_type_[i] && abs(o_x_[i] - player_x_) < 64 && abs(o_y_[i] - player_y_) < 64) {
                /* player ran into a health.  Make it go away and reward the player */
                /* set flash_type to 1 so that we do not display the flash of red */
                player_health_ += (64 - player_health_) / 4
                o_dead_[i] = flash_type = 1
            }
        }
    }

    if (u_) { /* if we are rotating adjust the rotation angle */
        player_rotation_ -= u_ * rad_ /* playerRotation is the players view angle */
        moved_ = 1
    }

    if (fwd_) {
        x_fwd = (player_x_ + fwd_ * cos(player_rotation_)) $
        y_fwd = (player_y_ + fwd_ * sin(player_rotation_)) $

        if (!is_not_valid_location(x_fwd, y_fwd)) {
            player_x_ = x_fwd
            player_y_ = y_fwd
            moved_ = 1
        }
    }

    if (moved_) {
        moved_ = 0
        ray_cast()

        flash_type = 0
        dir_x = cos(player_rotation_)
        dir_y = sin(player_rotation_)
        dir_len = cached_sqrt(dir_x * dir_x + dir_y * dir_y)

        for (i = 0; i < len; i++) {
            x = o_x_[i] - player_x_
            y = o_y_[i] - player_y_

            o_dist_[i] = cached_sqrt(x * x + y * y) /* distance */
            o_angl_[i] = cached_acos((dir_x * x + dir_y * y) / (o_dist_[i] * dir_len))
            if (dir_x * y - dir_y * x < 0) o_angl_[i] = -o_angl_[i]
        }

        sort_o(len)

        for (i = 0; i < len; i++) {
            sprite_height = (64 / o_dist_[i] * dist_to_proj_plane_) $
            sprite_top = (player_eye_level_ - sprite_height / 2) $
            sprite_bottom = (player_eye_level_ + sprite_height / 2) $

            if (sprite_top < 0) sprite_top = 0

            /* if i is zero then it is a monster, otherwise it is health */
            if (o_type_[i]) {
                sprite_pattern = sp_enemy
                sprite_mask = sp_enemymask
            } else {
                sprite_pattern = sp_health
                sprite_mask = sp_healthmask
            }

            o_lx_[i] = (w_ / 2 + o_angl_[i] / r_ - sprite_height / 2) $
            o_rx_[i] = o_lx_[i] + sprite_height

            if (o_dead_[i]) { /* determines if the object is dead */
                if (o_type_[i]) { /* if this is a monster */
                    sprite_pattern = sp_dead /* set it to a dead monster sprite */
                    sprite_mask = sp_deadmask
                } else {
                    continue
                }
            }

            if (o_type_[i] && !player_dead_ && o_vis_[i] == 1 && !o_dead_[i] && frand(2) < .05) {
                /* player hit */
                player_health_ -= irand(8)
                flash_type = 2
                if (player_health_ < 0) {
                    player_dead_ = 1 /* player is dead */
                    player_eye_level_ = h_ / 8 /* set the camera Y to 64/8 (fall down) */
                }
            }

            if (o_dist_[i] > 64 && draw_sprite(sprite_pattern, sprite_mask, sprite_top, o_lx_[i], sprite_bottom, o_rx_[i], o_dist_[i], 1)) {
                o_vis_[i] = 1 /* 1 indicates the monster is visible */
            } else {
                o_vis_[i] += 1 /* otherwise count frames monster not visible to player */
            }
        }

        draw_number(player_points_, 2, h_ + 1, 1)
        draw_number(num_monsters_ - num_killed_, 26, h_ + 1, 1)
        if (!player_dead_) {
            . = draw_sprite(sp_gun, sp_gunmask, h_ - 32, w_ / 2 - 16, h_, w_ / 2 + 16, 0, 1)
        }

        for (i = 0; i < player_health_; i++) {
            img__setpixel(canvas[], w_ - 2 - i, h_ + 3, black_)
        }

        show_screen(flash_type)
    }
}gg

clear_terminal()

for(;;) {
    key = read()

    if (key == L || key == D) {
        u_ = -12
    } else if (key == J || key == A) {
        u_ = 12
    } else if ((key == K || key == W) && !player_dead_) {
        fwd_ = 64/3;
    } else if ((key == M || key == S) && !player_dead_) {
        fwd_ = -64/3;
    } else if (key == 0) {
        fwd_ = u_ = 0
    } else if (key == 1) {
        if (!player_dead_) {
            . = draw_sprite(sp_fire, sp_fire, h_ - 32, w_ / 2 - 16, h_, w_ / 2 + 16, 0, 0)
            show_screen(0)

            for (i = 0; i < length(o_[]); i++) {
                if (o_type_[i] && !o_dead_[i] && o_lx_[i] < w_ / 2 && o_rx_[i] > w_ / 2 && o_vis_[i] == 1) {
                    o_dead_[i] = 1
                    num_killed_ +=1    /* numKilled is the kill count */
                    player_points_ += 10 * (game_level_ + (o_dist_[i] / 64) $)
                }
            }
            moved_ = 1
        }
    }

    tick()
}
